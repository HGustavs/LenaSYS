courseedservice.php

---------------------------------------------------------------------------------------------------------------------

========================================================================
========================================================================
===                           New Course                             ===
========================================================================
========================================================================

*********
* pre-req:
********* 

if(checklogin()){
	$isSuperUserVar=isSuperUser($userid);

	$ha = $isSuperUserVar;

	if($ha){

$query = $pdo->prepare("INSERT INTO course (coursecode,coursename,visibility,creator, hp, courseGitURL) VALUES(:coursecode,:coursename,0,:usrid, 7.5, :courseGitURL)");

*******
* bind parameters
******

$query->bindParam(':usrid', $userid);
$query->bindParam(':coursecode', $coursecode);
$query->bindParam(':coursename', $coursename);
$query->bindParam(':courseGitURL', $courseGitURL);

*******
* show error if we can't update entries
******

if(!$query->execute()) {
	$error=$query->errorInfo();
	$debug="Error updating entries\n".$error[2];
} 

*******
* Logging for creating new course
******

$description=$coursename." ".$coursecode." "."Hidden";
logUserEvent($userid, $username, EventTypes::AddCourse, $description);

*******
* Get username based on uid
******

$query_1 = $pdo->prepare( "SELECT cid FROM course ORDER BY cid DESC LIMIT 1");
$query_1-> execute();

*******
* show error if we can't read courses
******

if(!$query_1->execute()) {
	$error=$query_1->errorInfo();
	$debug="Error reading courses\n".$error[2];
}

*******
* push into array if we don't have any errors
*******

else{
	foreach($query_1->fetchAll(PDO::FETCH_ASSOC) as $row){
		array_push(
			$LastCourseCreated,
				array(
					'LastCourseCreatedId' => $row['cid'],
				)
		);
	}
}


************************************************************************
* Testing case 1 (User is not logged in and tries to add a new course) *
************************************************************************

// Arrange
$userid = null;
$coursecode = "CS101";
$coursename = "Introduction to Computer Science";
$courseGitURL = "https://github.com/cs101";

// Act
$result = addNewCourse($userid, $coursecode, $coursename, $courseGitURL);

// Assert
Assert::assertFalse($result);

***************************************************************************************
* Testing case 2 (User is logged in as a regular user and tries to add a new course.) *
***************************************************************************************

// Arrange
$userid = 123;
$coursecode = "CS101";
$coursename = "Introduction to Computer Science";
$courseGitURL = "https://github.com/cs101";

// Act
$result = addNewCourse($userid, $coursecode, $coursename, $courseGitURL);

// Assert
Assert::assertFalse($result);

*****************************************************************************************
* Testing case 3 (User is logged in as a superuser and adds a new course successfully.) *
*****************************************************************************************

// Arrange
$userid = 456;
$coursecode = "CS101";
$coursename = "Introduction to Computer Science";
$courseGitURL = "https://github.com/cs101";

// Act
$result = addNewCourse($userid, $coursecode, $coursename, $courseGitURL);

// Assert
Assert::assertTrue($result);


========================================================================
========================================================================
===                           New version                            ===
========================================================================
========================================================================

*********
* pre-req:
********* 

if(checklogin()){
	$isSuperUserVar=isSuperUser($userid);

	$ha = $isSuperUserVar;

	if($ha){

$query = $pdo->prepare("INSERT INTO vers(cid,coursecode,vers,versname,coursename,coursenamealt,startdate,enddate,motd) 
values(:cid,:coursecode,:vers,:versname,:coursename,:coursenamealt,:startdate,:enddate,:motd);");

*********
* bind parameters:
********* 

$query->bindParam(':cid', $cid);
$query->bindParam(':coursecode', $coursecode);
$query->bindParam(':vers', $versid);
$query->bindParam(':versname', $versname);
$query->bindParam(':coursename', $coursename);
$query->bindParam(':coursenamealt', $coursenamealt);
$query->bindParam(':motd', $motd);

*********
* insert null in db if start/end-values are null:
********* 

if($startdate=="null") $query->bindValue(':startdate', null,PDO::PARAM_INT);
else $query->bindParam(':startdate', $startdate);

if($enddate=="null") $query->bindValue(':enddate', null,PDO::PARAM_INT);
else $query->bindParam(':enddate', $enddate);

*******
* show error if we can't update entries
******

if(!$query->execute()) {
	$error=$query->errorInfo();
	$debug="Error updating entries\n".$error[2];
}

*******
* Make active version
******

if($makeactive==3){
	$query = $pdo->prepare("UPDATE course SET activeversion=:vers WHERE cid=:cid");
	$query->bindParam(':cid', $cid);
	$query->bindParam(':vers', $versid);

*******
* show error if we can't read courses
******

if(!$query->execute()) {
	$error=$query->errorInfo();
	$debug="Error reading courses\n".$error[2];
}

*******
* Logging for create a fresh course version
******

$description=$cid." ".$versid;
logUserEvent($userid, $username, EventTypes::AddCourseVers, $description);


*******************************************
* Testing case 1 ( User is not logged in) *
*******************************************

// Set up
$userid = null;
$startdate = "2023-04-20";
$enddate = "2023-05-20";
$makeactive = 3;

// Execute
$result = executeScript($userid, $startdate, $enddate, $makeactive);

// Verify
assert($result == "User is not logged in.");

*********************************************************
* Testing case 2 ( User is logged in as a regular user) *
*********************************************************

// Set up
$userid = 123;
$startdate = "2023-04-20";
$enddate = "2023-05-20";
$makeactive = 3;

// Execute
$result = executeScript($userid, $startdate, $enddate, $makeactive);

// Verify
assert($result == "User is not authorized to perform this action.");

****************************************************************************************
* Testing case 3 (User is logged in as a superuser, and all input variables are valid) *
****************************************************************************************

// Set up
$userid = 456;
$startdate = "2023-04-20";
$enddate = "2023-05-20";
$makeactive = 3;

// Execute
$result = executeScript($userid, $startdate, $enddate, $makeactive);

// Verify
assert($result == "New course version created successfully.");
// Also verify that the course version was inserted into the database correctly

*************************************************************************************
* Testing case 4 (User is logged in as a superuser, but the query fails to execute) *
*************************************************************************************

// Set up
$userid = 456;
$startdate = "2023-04-20";
$enddate = "2023-05-20";
$makeactive = 3;

// Inject an error into the script
$pdo = new PDO("sqlite::memory:");
$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$pdo->exec("CREATE TABLE vers(cid INT, coursecode TEXT, vers INT, versname TEXT, coursename TEXT, coursenamealt TEXT, startdate DATE, enddate DATE, motd TEXT)");
$pdo->exec("INSERT INTO vers(cid, coursecode, vers, versname, coursename, coursenamealt, startdate, enddate, motd) VALUES (1, 'ABC123', 1, 'Version 


========================================================================
========================================================================
===                         Update version                           ===
========================================================================
========================================================================

*********
* pre-req:
********* 

if(checklogin()){
	$isSuperUserVar=isSuperUser($userid);

	$ha = $isSuperUserVar;

	if($ha){

$query = $pdo->prepare("UPDATE vers SET versname=:versname WHERE cid=:cid AND coursecode=:coursecode AND vers=:vers;");

*********
* bind parameters:
********* 

$query->bindParam(':cid', $courseid);
$query->bindParam(':coursecode', $coursecode);
$query->bindParam(':vers', $versid);
$query->bindParam(':versname', $versname);

*******
* show error if we can't update entries
******

if(!$query->execute()) {
	$error=$query->errorInfo();
	$debug="Error updating entries\n".$error[2];
}


*******
* Make active version
******

if($makeactive==3){
	$query = $pdo->prepare("UPDATE course SET activeversion=:vers WHERE cid=:cid");
	$query->bindParam(':cid', $cid);
	$query->bindParam(':vers', $versid);


***************************************
* Testing case 1 (User not logged in) *
***************************************

$_SESSION['loggedin'] = false;
$_SESSION['userid'] = null;

$courseid = 1;
$coursecode = 'COMP101';
$versid = 2;
$versname = 'Version 2';
$makeactive = 3;

// Assert that version was not updated
$query = $pdo->prepare("SELECT versname FROM vers WHERE cid=:cid AND coursecode=:coursecode AND vers=:vers");
$query->bindParam(':cid', $courseid);
$query->bindParam(':coursecode', $coursecode);
$query->bindParam(':vers', $versid);
$query->execute();
$vers = $query->fetchColumn();
assert($vers === 'Version 1');

**********************************************************************************
* Testing case 2 (User is a superuser and all necessary parameters are provided) *
**********************************************************************************

$_SESSION['loggedin'] = true;
$_SESSION['userid'] = 123;
function isSuperUser($userid) { return true; }

$courseid = 1;
$coursecode = 'COMP101';
$versid = 2;
$versname = 'Version 2';
$makeactive = 3;

// Assert that version was updated
$query = $pdo->prepare("SELECT versname FROM vers WHERE cid=:cid AND coursecode=:coursecode AND vers=:vers");
$query->bindParam(':cid', $courseid);
$query->bindParam(':coursecode', $coursecode);
$query->bindParam(':vers', $versid);
$query->execute();
$vers = $query->fetchColumn();
assert($vers === 'Version 2');

*****************************************************************************
* Testing case 3 (User is a superuser and an invalid parameter is provided) *
*****************************************************************************

$_SESSION['loggedin'] = true;
$_SESSION['userid'] = 123;
function isSuperUser($userid) { return true; }

$courseid = 1;
$coursecode = 'COMP101';
$versid = 2;
$versname = '';
$makeactive = 3;

include 'update_version.php';

// Assert that version was not updated and error message was displayed
$query = $pdo->prepare("SELECT versname FROM vers WHERE cid=:cid AND coursecode=:coursecode AND vers=:vers");
$query->bindParam(':cid', $courseid);
$query->bindParam(':coursecode', $coursecode);
$query->bindParam(':vers', $versid);
$query->execute();
$vers = $query->fetchColumn();
assert($vers === 'Version 2');
assert(strpos($debug, 'Error updating entries') !== false);

*****************************************************************************
* Testing case 4 (User is a superuser and makeactive parameter is set to 3) *
*****************************************************************************

$_SESSION['loggedin'] = true;
$_SESSION['userid'] = 123;
function isSuperUser($userid) { return true; }

$courseid = 1;
$coursecode = 'COMP101';
$versid = 2;
$versname = 'Version 3';
$makeactive = 3;

// Assert that version was updated and made active
$query = $pdo->prepare("SELECT activeversion FROM course WHERE cid=:cid");
$query->bindParam(':cid', $courseid);
$query->execute();
$activeversion = $query->fetchColumn();
assert($activeversion === '2');

========================================================================
========================================================================
===                         Change version                           ===
========================================================================
========================================================================

*********
* pre-req:
********* 

if(checklogin()){
	$isSuperUserVar=isSuperUser($userid);

	$ha = $isSuperUserVar;

	if($ha){

$query = $pdo->prepare("UPDATE course SET activeversion=:vers WHERE cid=:cid");

*********
* bind parameters:
********* 

$query->bindParam(':cid', $courseid);
$query->bindParam(':vers', $versid);

*******
* show error if we can't update entries
******

if(!$query->execute()) {
	$error=$query->errorInfo();
	$debug="Error updating entries\n".$error[2];
}

**************************************************************************
* Testing case 1 (Test that the function checklogin() returns a boolean) *
**************************************************************************

public function testCheckLoginReturnsBoolean() {
    $result = checklogin();
    $this->assertIsBool($result);
}

**********************************************************************************
* Testing case 2 (Test that the function isSuperUser($userid) returns a boolean) *
**********************************************************************************

public function testIsSuperUserReturnsBoolean() {
    $userid = 123; // replace with a valid user ID
    $result = isSuperUser($userid);
    $this->assertIsBool($result);
}

************************************************************************************************************
* Testing case 3 (Test that the function isSuperUser($userid) returns true when the user is a super user.) *
************************************************************************************************************

public function testIsSuperUserReturnsTrueForSuperUser() {
    $userid = 123; // replace with a valid super user ID
    $result = isSuperUser($userid);
    $this->assertTrue($result);
}

*****************************************************************************************************************
* Testing case 4 (Test that the function isSuperUser($userid) returns false when the user is not a super user.) *
*****************************************************************************************************************

public function testIsSuperUserReturnsFalseForNonSuperUser() {
    $userid = 456; // replace with a valid non-super user ID
    $result = isSuperUser($userid);
    $this->assertFalse($result);
}


******************************************************************************************************************
* Testing case 5 (Test that the query statement is correctly prepared with the expected table and column names.) *
******************************************************************************************************************

public function testQueryStatementIsCorrectlyPrepared() {
    $pdo = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');
    $courseid = 789; // replace with a valid course ID
    $versid = 2; // replace with a valid version ID
    $query = $pdo->prepare("UPDATE course SET activeversion=:vers WHERE cid=:cid");
    $this->assertEquals("UPDATE course SET activeversion=:vers WHERE cid=:cid", $query->queryString);
}


********************************************************************************************************
* Testing case 6 (Test that the query statement is correctly binding the "cid" and "vers" parameters.) *
********************************************************************************************************

public function testQueryStatementIsCorrectlyBindingParameters() {
    $pdo = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');
    $courseid = 789; // replace with a valid course ID
    $versid = 2; // replace with a valid version ID
    $query = $pdo->prepare("UPDATE course SET activeversion=:vers WHERE cid=:cid");
    $query->bindParam(':cid', $courseid);
    $query->bindParam(':vers', $versid);
    $this->assertTrue($query->execute());
}

*************************************************************************************************************************************
* Testing case 7 (Test that the query executes successfully and updates the course's active version when the user is a super user.) *
*************************************************************************************************************************************

public function testQueryExecutesSuccessfullyForSuperUser() {
    $pdo = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');
    $courseid = 789; // replace with a valid course ID
    $versid = 2; // replace with a valid version ID
    $userid = 123; // replace with a valid super user ID
    $isSuperUserVar = isSuperUser($userid);
    if ($isSuperUserVar) {
        $query = $pdo->prepare("UPDATE course SET activeversion=:vers WHERE cid=:cid");
        $query->bindParam(':cid', $courseid);
        $query->bindParam(':vers', $versid);
        $this->assertTrue($query->execute());
    } else {
        $this->markTestSkipped('Test skipped because user is not a super user');
    }
}

************************************************************************************************************************
* Testing case 8 (Test that an error message is generated when the query fails to update the course's active version.) *
************************************************************************************************************************

public function testQueryFailsToUpdateActiveVersion() {
    $pdo = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');
    $courseid = 789; // replace with a valid course ID
    $versid = 2; // replace with a valid version ID
    $userid = 123; // replace with a valid super user ID
    $isSuperUserVar = isSuperUser($userid);
    if ($isSuperUserVar) {
        $query = $pdo->prepare("UPDATE course SET activeversion=:vers WHERE cid=:cid");
        $query->bindParam(':cid', $courseid);
        $query->bindParam(':vers', $versid);
        $this->assertFalse($query->execute());
        $error = $query->errorInfo();
        $debug = "Error updating entries\n" . $error[2];
        $this->assertNotEmpty($debug);
    } else {
        $this->markTestSkipped('Test skipped because user is not a super user');
    }
}

========================================================================
========================================================================
===                           Copy version                           ===
========================================================================
========================================================================


*********
* pre-req:
********* 

if(checklogin()){
	$isSuperUserVar=isSuperUser($userid);

	$ha = $isSuperUserVar;

	if($ha){

$allOperationsSucceeded = true;
try{
	$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	$pdo->beginTransaction();

$query = $pdo->prepare("INSERT INTO vers(cid,coursecode,vers,versname,coursename,coursenamealt,startdate,enddate,motd)
values(:cid,:coursecode,:vers,:versname,:coursename,:coursenamealt,:startdate,:enddate,:motd);");

*********
* bind parameters:
********* 

$query->bindParam(':cid', $cid);
$query->bindParam(':coursecode', $coursecode);
$query->bindParam(':vers', $versid);
$query->bindParam(':versname', $versname);
$query->bindParam(':coursename', $coursename);
$query->bindParam(':coursenamealt', $coursenamealt);
$query->bindParam(':motd', $motd);


*********
* insert null in db if start/end-values are null:
*********

if($startdate=="null") $query->bindValue(':startdate', null,PDO::PARAM_INT);
	else $query->bindParam(':startdate', $startdate);
if($enddate=="null") $query->bindValue(':enddate', null,PDO::PARAM_INT);
    else $query->bindParam(':enddate', $enddate);


*******
* show error if we can't update entries
******

if(!$query->execute()) {
	$error=$query->errorInfo();
	$debug="Error updating entries\n".$error[2];
}

*******
* Logging for creating a copy of course version
******

$description=$cid." ".$versid;
logUserEvent($userid, $username, EventTypes::AddCourseVers, $description);

*******
* Duplicate duggas and dugga variants
******

$duggalist=array();
$query = $pdo->prepare("SELECT * from quiz WHERE cid=:cid AND vers = :oldvers;");
$query->bindParam(':cid', $cid);
$query->bindParam(':oldvers', $copycourse);

*******
* show error if we can't read quiz
******

if(!$query->execute()) {
	$error=$query->errorInfo();
	$debug="Error reading quiz\n".$error[2];
}

*******
* if we don't get error reading quiz, try to copy
******

foreach($query->fetchAll(PDO::FETCH_ASSOC) as $row){
$ruery = $pdo->prepare("INSERT INTO quiz (cid,autograde,gradesystem,qname,quizFile,qrelease,relativedeadline,modified,creator,vers) SELECT cid,autograde,gradesystem,qname,quizFile,qrelease,relativedeadline,modified,creator,:newvers as vers from quiz WHERE id = :oldid;");
$ruery->bindParam(':oldid', $row['id']);
$ruery->bindParam(':newvers', $versid);

*******
* show error if we can't copy
******

if(!$ruery->execute()) {
	$error=$ruery->errorInfo();
	$allOperationsSucceeded = false;
	$debug.="Error copying quiz entry\n".$error[2];

*******
* if we don't get any errors, copy
******
else{
	$duggalist[$row['id']]=$pdo->lastInsertId();
}

*******
* try checking variant
******

foreach($duggalist as $key => $value){
	$buery = $pdo->prepare("SELECT * from variant WHERE quizID=:quizid;");
	$buery->bindParam(':quizid', $key);

	
*******
* Error reading variants
******

	if(!$buery->execute()) {
		$error=$buery->errorInfo();
		$allOperationsSucceeded = false;
		$debug="Error reading variants: ".$error[2];
	}else{

*******
* try updating entry
******

	foreach($buery->fetchAll(PDO::FETCH_ASSOC) as $rowz){
		$ruery = $pdo->prepare("INSERT INTO variant (quizID,param,variantanswer,modified,creator,disabled) SELECT :newquizid as quizID,param,variantanswer,modified,creator,disabled FROM variant WHERE vid = :oldvid;");
		$ruery->bindParam(':oldvid', $rowz["vid"]);
		$ruery->bindParam(':newquizid', $value);

*******
* Error updating entry
******
			if(!$ruery->execute()) {
				$error=$ruery->errorInfo();
				$allOperationsSucceeded = false;
				$debug.="Error updating entry\n".$error[2];
			}
	}
}

**************************************************************************
* Duplicate codeexamples and it's components box, improws, impwordlist (row 255)
**************************************************************************

*********
* pre-req:
********* 

A database with a table codeexample with columns exampleid, cid, cversion, examplename, sectionname, beforeid, afterid, runlink, public, updated, uid, templateid
A database with a table box with columns boxid, exampleid, boxtitle, boxcontent, filename, settings, wordlistid, segment, fontsize
A database with a table improw with columns impid, boxid, exampleid, istart, iend, irowdesc, updated, uid
A database with a table impwordlist with columns wordlistid, exampleid, wordid, word, worddesc, updated, uid

**********************************************************************
* Testing case 1 (Establish a connection to the database using PDO.) *
**********************************************************************

// Set the database connection details
$host = "localhost";
$dbname = "mydatabase";
$username = "myusername";
$password = "mypassword";

// Connect to the database using PDO
try {
  $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
  exit;
}

// Test if the connection was successful
if ($pdo) {
  echo "Connected to database successfully";
} else {
  echo "Failed to connect to database";
}

************************************************************************************************
* Testing case 2 (Duplicate code examples and its components (boxes, improws, and impwordlist) *
************************************************************************************************

// Set the course ID, old version, and new version
$cid = 123;
$copycourse = 1;
$versid = 2;

// Duplicate code examples and its components
$codeexamplelist = array();
$query = $pdo->prepare("SELECT * FROM codeexample WHERE cid=:cid AND cversion = :oldvers;");
$query->bindParam(':cid', $cid);
$query->bindParam(':oldvers', $copycourse);

if (!$query->execute()) {
  $error = $query->errorInfo();
  $allOperationsSucceeded = false;
  $debug = "Error reading codeexample: ".$error[2];
} else {
  foreach($query->fetchAll(PDO::FETCH_ASSOC) as $row) {
    $ruery = $pdo->prepare("INSERT INTO codeexample (cid, examplename, sectionname, beforeid, afterid, runlink, cversion, public, updated, uid, templateid) SELECT cid, examplename, sectionname, beforeid, afterid, runlink, :newvers as cversion, public, updated, uid, templateid FROM codeexample WHERE exampleid = :oldid;");
    $ruery->bindParam(':oldid', $row['exampleid']);
    $ruery->bindParam(':newvers', $versid);

    if (!$ruery->execute()) {
      $error = $ruery->errorInfo();
      $allOperationsSucceeded = false;
      $debug .= "Error copying codeexample entry\n".$error[2];
    } else {
      $codeexamplelist[$row['exampleid']] = $pdo->lastInsertId();
    }
  }

  // Test if the code example was duplicated successfully
  if (count($codeexamplelist) > 0) {
    echo "Code examples duplicated successfully";
  } else {
    echo "Failed to duplicate code examples";
  }
}

**********************************************************
* Testing case 3 (Duplicate boxes for each code example) *
**********************************************************

foreach ($codeexamplelist as $key => $value) {
  $query = $pdo->prepare("SELECT * FROM box WHERE exampleid=:exampleid;");
  $query->bindParam(':exampleid', $key);

  if (!$query->execute()) {
    die("Error: Unable to execute query.");
  }

  $boxes = $query->fetchAll(PDO::FETCH_ASSOC);

  foreach ($boxes as $box) {
    $newQuery = $pdo->prepare("INSERT INTO box (exampleid, title, description, code) VALUES (:exampleid, :title, :description, :code);");
    $newQuery->bindParam(':exampleid', $value['id']);
    $newQuery->bindParam(':title', $box['title']);
    $newQuery->bindParam(':description', $box['description']);
    $newQuery->bindParam(':code', $box['code']);

    if (!$newQuery->execute()) {
      die("Error: Unable to execute query.");
    }
  }
}

**********************************************************
* Testing case 4 (Duplicating improws for a new example) *
**********************************************************

// Prepare test data
$key = 1; // old example ID
$value = 2; // new example ID


// Duplicate improws for each code example
$pruery = $pdo->prepare("SELECT * FROM improw WHERE exampleid=:oldexampleid;");
$pruery->bindParam(':oldexampleid', $key);
if (!$pruery->execute()) {
    $error = $pruery->errorInfo();
    $allOperationsSucceeded = false;
    $debug .= "Error finding improws\n".$error[2];
}
foreach ($pruery->fetchAll(PDO::FETCH_ASSOC) as $improwz) {
    if ($pruery->rowCount() > 0) {
        $qruery = $pdo->prepare("INSERT INTO improw (boxid,exampleid,istart,iend,irowdesc,updated,uid) SELECT boxid,:newexampleid as exampleid,istart,iend,irowdesc,updated,uid FROM improw WHERE exampleid=:oldexampleid and impid=:oldimpid and boxid=:oldboxid;");
        $qruery->bindParam(':oldboxid', $improwz["boxid"]);
        $qruery->bindParam(':oldimpid', $improwz["impid"]);
        $qruery->bindParam(':oldexampleid', $key);
        $qruery->bindParam(':newexampleid', $value);
        if (!$qruery->execute()) {
            $error = $qruery->errorInfo();
            $allOperationsSucceeded = false;
            $debug .= "Error duplicating improws\n".$error[2];
        }
    }
}

************************************************************************************************
Make duplicate of impwordlist for current code example and bind to the new copy (Line 324)
************************************************************************************************

The bindParam() method is then used to bind the value of a variable named $key to the named parameter :oldexampleid.
This is done to prevent SQL injection attacks and to ensure that the query is executed safely.

If the query fails to execute, an error message is appended to a variable named $debug and the boolean variable $allOperationsSucceeded is set to false.

After the query is executed successfully, the results are retrieved using the fetchAll() method of the PDOStatement object and stored in an array named $impwordz.

A foreach loop is then used to iterate over each row of the result set. If the result set contains any rows, a new query is executed to insert data into the same table impwordlist.
This query uses a subquery in the SELECT clause to retrieve data from the same table where the value of exampleid and wordid match the values of :oldexampleid and $impwordz["wordid"], respectively.

The values of :oldexampleid, $impwordz["wordid"], and $value are bound to named parameters in the query using the bindParam() method. If the query fails to execute, an error message is appended to the $debug variable and the $allOperationsSucceeded variable is set to false.

The purpose of this code appears to be to duplicate certain rows of data from the impwordlist table and insert them with a new value for exampleid.


Test case: (unit test function that simulates the behavior of the code and checks if the expected output is generated)

function testImpwordList() {
    // create a PDO object to connect to the database
    $dsn = 'mysql:host=localhost;dbname=mydatabase';
    $username = 'myusername';
    $password = 'mypassword';
    $pdo = new PDO($dsn, $username, $password);


// prepare the query
    $key = 1;
    $value = 2;
    $zruery = $pdo->prepare("SELECT * FROM impwordlist WHERE exampleid=:oldexampleid;");
    $zruery->bindParam(':oldexampleid', $key);

// execute the query and check for errors
    $allOperationsSucceeded = true;
    $debug = "";
    if(!$zruery->execute()) {
        $error=$zruery->errorInfo();
        $allOperationsSucceeded = false;
        $debug.="Error finding impwords\n".$error[2];
    }

// fetch all the rows and duplicate them
    foreach ($zruery->fetchAll(PDO::FETCH_ASSOC) as $impwordz) {
        if ($zruery->rowCount() > 0){
            $zzqruery = $pdo->prepare("INSERT INTO impwordlist (exampleid,word,label,updated,uid) SELECT :newexampleid as exampleid,word,label,updated,uid FROM impwordlist WHERE exampleid=:oldexampleid and wordid=:oldwordid;");
            $zzqruery->bindParam(':oldwordid', $impwordz["wordid"]);
            $zzqruery->bindParam(':oldexampleid', $key);
            $zzqruery->bindParam(':newexampleid', $value);

            // execute the query and check for errors
            if(!$zzqruery->execute()) {
                $error=$zzqruery->errorInfo();
                $allOperationsSucceeded = false;
                $debug.="Error duplicating impwords: ".$error[2];
            }
        }
    }

// check if all operations succeeded
    $this->assertTrue($allOperationsSucceeded, $debug);
}

