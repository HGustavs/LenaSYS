showDuggaservice.php

-------------------------------------------------------------------------------------------------------------
TEST#1
updateActiveUsersTest(100-118)
Test to ensure active users can be updated/created.
First make a sql query that creates an active_users in groupdugga. Then try updating the active_users with the newly created values.
Or try updating an active users without a active_users token. Then it will create a AUtoken for that active users hash

Pre-req: {($opt, "UPDATEAU")==0}

SQL query to get active_users: SELECT active_users FROM groupdugga WHERE hash=hash;
hash gets binded to $hash that is then executed
active_users gets fetched and $active gets the value of active_users

SQL query: If no active_users is found: INSERT INTO groupdugga(hash,active_users) VALUES(hash,AUtoken);
hash gets bind to $hash
AUtoken gets bind to $AUtoken
Its the executed

SQL query: If a active_users is found: UPDATE groupdugga SET active_users=AUtoken WHERE hash=hash;
A $newToken is created and gets the values (int) from $active and $AUtoken
It gets then executed

To see if test worked: SELECT active_users FROM groupdugga WHERE hash=hash;
SQL query: If active_users is updated the test has succeded
Compare the values.

--------------------------------------------------------------------------------------------------------
TEST#2
saveDuggaTest(254-312)
Test to ensure a student can save a dugga (NOT A TEACHER)
Login to LenaSYS, either start a new dugga or update with hash.
Make an sql query that either updates userAnswer with the values or insert a whole new table into userAnswer.
The test will pass if both of these actions can be done

Pre-req: {$opt, "SAVDU"}, {!isSuperUser($userid)}
SQL query to get password, timesSubmitted, timesAccessed and grade: SELECT password,timesSubmitted,timesAccessed,grade from userAnswer WHERE hash=hash;
grade = $grade. This is used to determine if the user already has a grade in the dugga. If thats the case then the service will end.

If the user doesnt have a passing grade then this the user can first update the dugga answer.
SQL query for updating answer: UPDATE userAnswer SET submitted=NOW(), useranswer=useranswer, timesSubmitted=timesSubmitted+1 WHERE hash=hash AND password=hashpwd;
hash, hashpwd and useranswer is bound to $query and then executed()
If the userAnswer is updated in the db this test has succeded.

If the user doesnt have an answer the user can insert the answer to the db (userAnswer)
SQL query to insert into userAnswer: INSERT INTO userAnswer(cid,quiz,moment,vers,variant,hash,password,timesSubmitted,timesAccessed,useranswer,submitted) VALUES(cid,did,moment,coursevers,variant,hash,password,1,1,useranswer,now());
:cid, :coursevers, :did, :moment, :variant, :hash, :password and :useranswer is bindParam to $query and then executed
If all of the above is inserted into userAnswer this has succeded.
If not $debug="Unable to save dugga!"


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST#3
allmightyViewTest(318-451)
This test ensures that a teacher (user with a super account) can view all answer by users
This service is pretty big but i shall try and be a short as possible

To test this service try to get everything a teacher can access in the userAnswer table in the db

Pre-req: {isSuperUser($userid)}
if the hash is "UNK" then the program tries to get data from userAnswer where hash = hash (distinct user hash)
SQL query: SELECT vid,variant.variantanswer AS variantanswer,useranswer,param,cid,vers,quiz FROM userAnswer LEFT JOIN variant ON userAnswer.variant=variant.vid WHERE hash=hash;
this is then the fetched as $rows
This test works if the data is presented in MySql

If the hash didnt work to retrive all answers for that moment it tries select the same values but instead of where hash = hash its moment = moment
SQL query: SELECT vid,variant.variantanswer AS variantanswer,useranswer,param,cid,vers,quiz FROM userAnswer LEFT JOIN variant ON userAnswer.variant=variant.vid WHERE moment=moment;
It will the fetch the same way as above
This test works if the data is presented in MySql

This data is then presented with a foreach loop for $rows

After this is done the service gets the entryname for the moment (ex bitr√§kningsdugga 1)
SQL query for this: SELECT entryname FROM listentries WHERE lid=moment;
:moment is then bound to $moment and then executed
This text works if a list of all entrynames is presented

If the everything works the data should be presented on Lenasys.
If not $debug gets error message and the data is reset

That was the first part of the if statement
This part is for a "normal" user to view only the users answer

If hash and password is unknown the service gets the data
SQL query for users dugga: SELECT vid,variant.variantanswer AS variantanswer,useranswer,param,cid,vers,quiz FROM userAnswer LEFT JOIN variant ON userAnswer.variant=variant.vid WHERE hash=hash AND password=hashpwd
This is almost the same as the teachers query but at the end the users hashpwd is selected which will only provide 1 dugga.
This is succeful if only a single dugga is presented in the db and on LenaSYS

If the service finds hash and password the service gets data by
SQL query to get data: SELECT quiz.*, variant.vid AS vid,IF(useranswer is NULL,'UNK',useranswer) AS useranswer,variantanswer,param,l.entryname AS dugga_title FROM quiz LEFT JOIN variant ON quiz.id=variant.quizID LEFT JOIN userAnswer ON userAnswer.variant=variant.vid AND hash=hash AND password=hashpwd LEFT JOIN (select cid,link,entryname from listentries) as l ON l.cid=l.cid AND l.link=quiz.id WHERE quiz.id=did AND vid=variant AND l.cid=cid LIMIT 1;
It then prepares this query, binds the values and executes it
Its then presented with a foreachloop
The data is also presented on LenaSYS with processDuggaFiles();



