<?php
date_default_timezone_set("Europe/Stockholm");

// Include basic application services!
include_once "../Shared/sessions.php";
include_once "../Shared/basic.php";

// Connect to database and start session
pdoConnect();
session_start();

if(isset($_SESSION['uid'])){
	$userid=$_SESSION['uid'];
	$loginname=$_SESSION['loginname'];
	$lastname=$_SESSION['lastname'];
	$firstname=$_SESSION['firstname'];
}else{
	$userid=1;
	$loginname="UNK";		
	$lastname="UNK";
	$firstname="UNK";
} 	

// Options from AJAX
$opt = getOP('opt'); // AJAX mode

// General & all (GET)
$cid = getOP('cid'); // Course id
$vers = getOP('vers'); // Course version

// When using opt NEWGROUP
$chosenMoment=getOP("chosenMoment"); // Moment (when creating new  groups, lid needs to be connected)
$groupName=getOP("groupName"); // Name on group (when creating new groups, a name is needed)


// When using opt UPDATEGROUP AND UPDATEOPPONENT

// When using opt DELGROUP
$chosenMomentRemove=getOP("chosenMomentRemove"); // Moment (when creating new  groups, lid needs to be connected)
$ugidGroup=getOP("ugidGroup"); // Name on group (when creating new groups, a name is needed)

// When using opt UPDATEGROUP
$uid = getOP('uid'); // User id

// When using opt UPDATEGROUP
$lid = getOP('lid');
$newUgid = getOP('newUgid'); // The new ugid, used when using INSERT or UPDATE
$oldUgid = getOP('oldUgid'); // The old ugid, used when using DELETE FROM

// When using opt UPDATEOPPONENT
$newOpp = getOP('newOpp');

$headings=array();

$data = [
	'moments' => null,
	'tablecontent' => null,
	'availablegroups' => null,
	'feedback' => null
]; // Array that contains all data generated by the queries in this file and is written to a JSON string.

$debug="NONE!";

// Create arguments for log
$log_uuid = getOP('log_uuid'); // Cookie id or something.. 
$info=$opt." ".$cid." ".$vers." ".$groupName." ".$uid." ".$lid." ".$oldUgid." ".$newUgid;

// Log the start event of this service query. This is logged in log.db (not MySQL)
logServiceEvent($log_uuid, EventTypes::ServiceServerStart, __FILE__, $userid, $info);

// Don't retreive all results if request was for a single dugga or a grade update
if(strcmp($opt,"GET")==0){
 	if(checklogin() && (hasAccess($_SESSION['uid'], $cid, 'w') || isSuperUser($_SESSION['uid']))) {

 		// Check if there are any applicable listentries
 		$query = $pdo->prepare("SELECT COUNT(*) FROM listentries WHERE (grouptype != 1 OR grouptype != 3) AND cid = :cid AND vers = :vers");
 		$query->bindParam(':cid', $cid);
 		$query->bindParam(':vers', $vers);

 		if(!$query->execute()) {
			$error=$query->errorInfo();
			$debug="Failed to check if there were any applicable listentries to display group information. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
		}
		
		if($query->fetchColumn() > 0) { // If there were any applicable listentries for this search
			// Retreive information queries
			// First query: get the headings for the table, which is the listentry names. 
			$query = $pdo->prepare("SELECT listentries.*,quizFile,COUNT(variant.vid) as qvariant FROM listentries LEFT JOIN quiz ON  listentries.link=quiz.id LEFT JOIN variant ON quiz.id=variant.quizID WHERE listentries.cid=:cid and listentries.vers=:vers and (listentries.kind=4) AND (listentries.grouptype=1 OR listentries.grouptype=3) GROUP BY lid ORDER BY pos;");

			$query->bindParam(':cid', $cid);
			$query->bindParam(':vers', $vers);

  if(!$query->execute()) {
				$error=$query->errorInfo();
				$debug="Error retreiving moments and duggas. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
	}

			$currentMoment=null; // This is a mystery
      
		// Save the headings for the table 
		foreach($query->fetchAll(PDO::FETCH_ASSOC) as $row){
			array_push(
				$headings,
				array(
					'entryname' => $row['entryname'],
					'lid' => (int)$row['lid'],
					'kind' => (int)$row['kind'],
					'moment' => (int)$row['moment'],
					'visible'=> (int)$row['visible'],
					'grouptype' => (int)$row['grouptype']
				)
			);
		}
		
		// Put it in the data array
		$data['moments'] = $headings;
		
		// Get a list of the lids, to be used when displayed to what group a user belongs 
		$lids = [];
		foreach($headings as $heading) {
			$lids[] = $heading['lid'];
		}
		
		// Take a copy of the lids
		$allLids = $lids;
		
		// Make it a array of keys with false as standard value 
		$lids = array_fill_keys($lids, false);
		
			// Second query: Select all users that are connected to the course and the current version of it. Order by the uid. 
			$query = $pdo->prepare("SELECT user.uid, user.firstname, user.lastname, user.ssn, user.username FROM user, user_course WHERE user.uid = user_course.uid AND user_course.cid = :cid AND user_course.vers = :vers ORDER BY user.username");
			$query->bindParam(':cid', $cid);
			$query->bindParam(':vers', $vers);
			
			if(!$query->execute()) {
				$error=$query->errorInfo();
				$debug="Error retreiving moments and duggas. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
			}

			// Get the first two columns, which is the students and their groups. Save this information, and set the group assignments after the next query. 
			$studentData = $query->fetchAll(PDO::FETCH_ASSOC); // 2 rows initially. (count = 2)

			// Third query: Select all user id's that are connected to a group and their lid. 
			$query = $pdo->prepare("SELECT uug.uid, ug.lid, uug.ugid FROM user_usergroup AS uug, usergroup AS ug, listentries AS l WHERE uug.ugid = ug.ugid AND ug.lid = l.lid AND l.cid = :cid AND l.vers = :vers AND l.kind = 4 AND (l.grouptype = 1 OR l.grouptype = 3) ORDER BY uug.uid");

			$query->bindParam(':cid', $cid);
			$query->bindParam(':vers', $vers);

			if(!$query->execute()) {
				$error=$query->errorInfo();
				$debug="Error retreiving moments and duggas. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
			}

			// Assigned courses
			$groupData = $query->fetchAll(PDO::FETCH_ASSOC);
		
			// Fourth query: Select all available groups
			$query = $pdo->prepare("SELECT lid, ugid, name FROM usergroup ORDER BY name"); // Query to get all existing groups 
			
			if(!$query->execute()) {
				$error=$query->errorInfo();
				$debug="Error retreiving moments and duggas. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
			}
			
			$allGroups = $query->fetchAll(PDO::FETCH_ASSOC); // Contains all groups. 

			// Create array to hold the table contents. 
			$tableContent = [];
			
			foreach($studentData as &$studentRow) { // Iterate the student rows (& for keeping the array up to date)
				$lidstogroup = $lids;
				foreach($groupData as $groupRow) {
					// This checks which group is assigned. However, the existing groups must also be in the dropdown menu, so available groups must also be filled, with null. 
					if($studentRow['uid'] == $groupRow['uid']) {
						$lidstogroup[strval($groupRow['lid'])] = $groupRow['ugid']; // Put a new key with lid and a new value for the key, the group id 
					}
				}
				$studentRow['lidstogroup'] = $lidstogroup;
				array_push($tableContent, $studentRow);
			}
			
			// Create a array with lids as keys to contain the available groups per lid
			$groupsPerLids = array_flip($allLids);
		
			// Iterate groups and place per lid
			foreach($groupsPerLids as $lid => &$val) { // [2001] => 0, [2013] => 1
				$val = array(); // Make the value an array (else php makes it a scalar error)
				foreach($allGroups as $group) {
					if($lid == $group['lid']) {
						// If there is a lid match, insert the group as available for the lid
						$arr = array($group['ugid'] => $group['name']);
						array_push($val, $arr);
					}
				}
			}
			
			// Place the data in the output data array
			$data['tablecontent'] = $tableContent;
			$data['availablegroups'] = $groupsPerLids;
		
		// Fourth query: Select all users and their group belongings 
		$query = $pdo->prepare("SELECT uug.uid, ug.lid, uug.ugid, ug.name, user.username, user.firstname, user.lastname FROM user_usergroup AS uug, usergroup AS ug, listentries AS l, user WHERE uug.ugid = ug.ugid AND ug.lid = l.lid AND l.cid = :cid AND l.vers = :vers AND l.kind = 4 AND (l.grouptype = 1 OR l.grouptype = 3) AND user.uid=uug.uid ORDER BY uug.uid;");
		$query->bindParam(':cid', $cid);
		$query->bindParam(':vers', $vers);
		
		$groupbelongings = [];
		
		if(!$query->execute()) {
			$error=$query->errorInfo();
			$debug="Error retreiving students and groups. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
		}
		
		// Save the students and the groups they are in 
		foreach($query->fetchAll(PDO::FETCH_ASSOC) as $row){
			array_push(
				$groupbelongings,
				array(
					'uid' => $row['uid'],
					'lid' => $row['lid'],
					'ugid' => $row['ugid'],
					'name' => $row['name'],
					'username' => $row['username'],
					'firstname' => $row['firstname'],
					'lastname' => $row['lastname']
				)
			);
		}

		// Place the data in the output data array
		$data['tablecontent'] = $tableContent;
		$data['availablegroups'] = $groupsPerLids;
		$data['groupbelongings'] = $groupbelongings;

		echo json_encode($data);

 	}
} else if(strcmp($opt,"NEWGROUP")==0){
	$query = $pdo->prepare("INSERT INTO usergroup (ugid,name,lid,created,lastupdated) VALUES (DEFAULT, :groupName,:chosenMoment,CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"); 
	$query->bindParam(':chosenMoment', $chosenMoment);
	$query->bindParam(':groupName', $groupName);

	if(!$query->execute()) {
		$error=$query->errorInfo();
		$debug="Error updating entries".$error[2];
	}else{
		foreach($query->fetchAll(PDO::FETCH_ASSOC) as $row){
			array_push(
				$codeexamples,
				array(
					'ugid' => (int)$row['ugid'],
					'name' => $row['groupName'],
					'created' => $row['created'],
					'lid' => (int)$row['chosenMoment'],
					'lastupdated' => $row['lastupdated']
				)
			);
		}
	}
} else if(strcmp($opt,"DELGROUP")==0){
	$query = $pdo->prepare("DELETE FROM usergroup WHERE ugid = :ugidGroup AND lid = :chosenMomentRemove"); 
	$query->bindParam(':ugidGroup', $ugidGroup);
	$query->bindParam(':chosenMomentRemove', $chosenMomentRemove);

	if(!$query->execute()) {
		$error=$query->errorInfo();
		$debug="Error updating entries".$error[2];
	}
} else if(strcmp($opt, "UPDATEGROUP") == 0) {
	
	if($newUgid > 0) { // User wants to assign to a group 
		
		// Check if the user is in the database together with the oldUgid
		$query = $pdo->prepare("SELECT COUNT(*) FROM user_usergroup WHERE uid = :uid AND ugid = :oldUgid");
		$query->bindParam(':uid', $uid);
		$query->bindParam(':oldUgid', $oldUgid);
		
		if(!$query->execute()) {
			$error=$query->errorInfo();
			$debug="Failed to check if this user is assigned to a group. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
		}
		
		if($query->fetchColumn() > 0) { // If the user is in the database together with the oldUgid, update to the new one 
			$query = $pdo->prepare("UPDATE user_usergroup SET ugid = :newUgid WHERE uid = :uid AND ugid = :oldUgid");
			$query->bindParam(':uid', $uid);
			$query->bindParam(':newUgid', $newUgid);
			$query->bindParam(':oldUgid', $oldUgid);
			
			if(!$query->execute()) {
				$error=$query->errorInfo();
				$debug="Failed to update a user/group assignment. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
			}
		} else { // Else, insert a new row for the user 
			$query = $pdo->prepare("INSERT INTO user_usergroup (uid, ugid) VALUES (:uid, :newUgid)");
			$query->bindParam(':uid', $uid);
			$query->bindParam(':newUgid', $newUgid);
			
			if(!$query->execute()) {
				$error=$query->errorInfo();
				$debug="Failed to insert a user/group assignment. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
			}
		}
		
	} else { // User wants to unassign from a group
		$query = $pdo->prepare("DELETE FROM user_usergroup WHERE uid = :uid AND ugid = :oldUgid");
		$query->bindParam(":uid", $uid);
		$query->bindParam(":oldUgid", $oldUgid);
		
		if(!$query->execute()) {
			$error=$query->errorInfo();
			$debug="Error deleting uid/ugid mapping. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
		}
	}
	
} else if(strcmp($opt,"UPDATEOPPONENT")==0){
	
	if($newOpp > 0) { // User wants to assign an opponent 
	
		// Check if the user is in the database with an opponent
		$query = $pdo->prepare("SELECT COUNT(*) FROM opponents WHERE presenter = :uid AND lid = :lid");
		$query->bindParam(':uid', $uid);
		$query->bindParam(':lid', $lid);
		
		if(!$query->execute()) {
			$error=$query->errorInfo();
			$debug="Failed to check if this user has opponents. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
		}
		
		if($query->fetchColumn() > 0) { // If the user is in the database together with an opponent, update the table 
			$query = $pdo->prepare("UPDATE opponents SET opponent1 = :newOpp WHERE presenter = :uid AND lid = :lid");
			$query->bindParam(':uid', $uid);
			$query->bindParam(':newOpp', $newOpp);
			$query->bindParam(':lid', $lid);
			
			if(!$query->execute()) {
				$error=$query->errorInfo();
				$debug="Failed to update opponent1. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
			}
		} else { // Else, insert a new row for the user 
			$query = $pdo->prepare("INSERT INTO opponents (presenter, lid, opponent1) VALUES (:uid, :lid, :newOpp)");
			$query->bindParam(':uid', $uid);
			$query->bindParam(':lid', $lid);
			$query->bindParam(':newOpp', $newOpp);
			
			if(!$query->execute()) {
				$error=$query->errorInfo();
				$debug="Failed to insert opponent. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
			}
		}
			
	} else { // User wants to unassign opponent
		$query = $pdo->prepare("DELETE FROM opponents WHERE presenter = :uid AND lid = :lid");
		$query->bindParam(":uid", $uid);
		$query->bindParam(":lid", $lid);
		
		if(!$query->execute()) {
			$error=$query->errorInfo();
			$debug="Error deleting user with opponents. (row ".__LINE__.") ".$query->rowCount()." row(s) were found. Error code: ".$error[2];
		}
	}
}

// Log the end event of this service query.
logServiceEvent($log_uuid, EventTypes::ServiceServerEnd, __FILE__, $userid, $info);

?>
